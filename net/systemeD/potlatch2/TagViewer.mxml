<?xml version="1.0" encoding="utf-8"?>
<mx:VBox
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:flexlib="flexlib.containers.*"
	xmlns:controls="net.systemeD.controls.*"
	xmlns:potlatch2="net.systemeD.potlatch2.*"
    xmlns:sidepanel="net.systemeD.potlatch2.panels.*"
	horizontalScrollPolicy="off"
    backgroundColor="white"
    initialize="loadFeatures()">

<mx:ViewStack id="sidebar" width="100%" height="100%" creationPolicy="all">

  <!-- Drag & drop icon panel -->

  <mx:VBox id="dndPanel" width="100%" height="100%" horizontalScrollPolicy="off" styleName="dndPanelVbox">
    <mx:Text id="dndPanelText" text="{dndPrompt}" width="100%" styleName="helpInfo" />
	<mx:Repeater id="dndRep" dataProvider="{MapFeatures.getInstance().getCategoriesForType('point')}" styleName="dndRepeater">
		<mx:HBox width="100%" styleName="dndPanelCategory">
			<mx:Label text="{dndRep.currentItem.name}:" styleName="dndPanelCategoryLabel"/>
		</mx:HBox>

		<mx:TileList dataProvider="{dndRep.currentItem.getFeaturesForType('point', true)}" width="100%" height="1"
			             rowHeight="32" columnWidth="32" updateComplete="resizePOIGrid(event)" styleName="dndPanelTileList">
			<mx:itemRenderer>
				<mx:Component>
					<mx:VBox toolTip="{data.name}">
						<mx:Script><![CDATA[
							import mx.events.DragEvent;
							import mx.managers.DragManager;
							import mx.core.DragSource;

							private function dragPOI(event:MouseEvent, tags:Array):void {
								// Get the drag initiator component from the event object.
								var dragInitiator:Image = event.currentTarget as Image;
								var dragSource:DragSource = new DragSource();
								dragSource.addData(tags, 'tags');
								dragSource.addData(event.target.parent.parent.parent.parent, 'container');

								var dragProxy:Image = new Image();
								dragProxy.source = dragInitiator.source;
								dragProxy.width = dragInitiator.width;   // must set width and height explicitly
								dragProxy.height = dragInitiator.height; // for non-embedded images
								DragManager.doDrag(dragInitiator, dragSource, event, dragProxy);
							}
						]]></mx:Script>
						<mx:Image id="foo" source="{data.dndimage}" height="24" width="24" mouseMove="dragPOI(event, data.tags)" toolTip="{data.name}" />
					</mx:VBox>
				</mx:Component>
			</mx:itemRenderer>
		</mx:TileList>
	</mx:Repeater>
  </mx:VBox>

  <!-- Standard tagging panel -->

  <mx:VBox id="tagsPanel" width="100%" height="100%" creationPolicy="auto">
    <mx:ViewStack id="stack" width="100%" height="100%">
      <mx:VBox width="100%" height="100%" label="Simple" id="editorContainer" creationComplete="initEditorStackUIs()" styleName="dndPanelVbox">
        <mx:VBox width="100%" verticalGap="1" styleName="dndTagHeader">
          <mx:HBox width="100%" id="iconContainer" styleName="featureSelector">
            <mx:Image id="iconImage"/>
            <mx:Text condenseWhite="true" width="100%" id="iconText" styleName="dndIconText"/>
          </mx:HBox>
          <mx:HBox width="100%">
            <mx:PopUpButton id="popupChange" openAlways="true" width="100%" styleName="dndTagPopUpMenu" closeDuration="0" />
            <mx:LinkButton icon="@Embed('../../../embedded/information.svg')" click="openDescription()" id="helpLabel" styleName="helpInfo"/>
          </mx:HBox>
        </mx:VBox>
      </mx:VBox>
      <mx:VBox width="100%" height="100%" label="Advanced" id="advancedContainer" initialize="checkAdvanced()" verticalGap="1">
        <mx:Label id="advancedID" click="openEntityPage()">
          <mx:htmlText><![CDATA[<i>No Selection</i>]]></mx:htmlText>
        </mx:Label>

		<potlatch2:TagGrid id="advancedTagGrid" width="100%" height="75%" />

        <mx:HBox horizontalAlign="right" width="100%">
          <mx:LinkButton label="Delete" click="advancedTagGrid.removeTag()" id="advancedDeleteButton" enabled="{advancedTagGrid.selectedItem != null? true : false}"/>
          <mx:LinkButton label="Add" click="advancedTagGrid.addNewTag()" id="advancedAddButton"/>
        </mx:HBox>

        <mx:DataGrid editable="true" width="100%" height="25%" id="relationsGrid"
            doubleClickEnabled="true"
            itemDoubleClick="editRelation(relationsGrid.selectedItem.id)"
            doubleClick="if (event.target.parent==relationsGrid) { addToRelation(); }">
            <mx:columns>
                <mx:DataGridColumn editable="false" dataField="description" headerText="Relation"/>
                <mx:DataGridColumn editable="false" dataField="id_idx" headerText="ID"/>
                <mx:DataGridColumn editable="true" dataField="role" headerText="Role">
                    <mx:itemEditor><mx:Component><mx:TextInput restrict="&#x0020;-&#x10FFFF;" /></mx:Component></mx:itemEditor>
                </mx:DataGridColumn>
				<mx:DataGridColumn width="20" editable="false">
					<mx:itemRenderer>
						<mx:Component>
		                    <mx:HBox horizontalAlign="center" verticalAlign="middle">
								<mx:PopUpButton arrowButtonWidth="12" paddingLeft="0" paddingRight="0" width="12" height="12" 
								                open="{outerDocument.updateRelationMenu(event);}" 
								                creationComplete="{outerDocument.createRelationMenu(PopUpButton(event.target));}"/>
							</mx:HBox>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
            </mx:columns>
        </mx:DataGrid>

        <mx:HBox horizontalAlign="right" width="100%">
          <mx:LinkButton label="Remove from" click="removeFromRelation(relationsGrid.selectedItem.id, relationsGrid.selectedItem.index)"
                          enabled="{relationsGrid.selectedItem != null? true : false}"/>
          <mx:LinkButton label="Add to" click="addToRelation()"/>
        </mx:HBox>

      </mx:VBox>

      <mx:VBox width="100%" height="100%" label="Members" id="membersVBox" initialize="checkMembers()" verticalGap="1">
        <mx:Label id="membersText" text="Relation Members"/>
        <mx:DataGrid editable="true" width="100%" height="100%" id="membersGrid"
                      dragEnabled="true" dragMoveEnabled="true" dropEnabled="true">
          <mx:columns>
            <mx:DataGridColumn editable="false" dataField="type" headerText="Type"/>
            <mx:DataGridColumn editable="false" dataField="id" headerText="ID"/>
            <mx:DataGridColumn editable="true" dataField="role" headerText="Role">
				<mx:itemEditor><mx:Component><mx:TextInput restrict="&#x0020;-&#x10FFFF;" /></mx:Component></mx:itemEditor>
			</mx:DataGridColumn>
          </mx:columns>
        </mx:DataGrid>
      </mx:VBox>

      </mx:ViewStack>

	  <mx:HBox width="100%">
		<mx:LinkBar dataProvider="{stack}"/>
		<mx:Spacer width="100%"/>
		<mx:LinkButton
			icon="@Embed('../../../embedded/view_tabbed.png')"
			disabledIcon="@Embed('../../../embedded/view_tabbed_disabled.png')"
			click="setEditorStackUI(true)" id="tabNavigatorLabel" paddingTop="6"
			toolTip="Show in tabs"
			enabled="{editorStack is Accordion &amp;&amp; stack.selectedIndex==0}" />
		<mx:LinkButton
			icon="@Embed('../../../embedded/view_accordion.png')"
			disabledIcon="@Embed('../../../embedded/view_accordion_disabled.png')"
			click="setEditorStackUI(false)" id="accordionLabel" paddingTop="6"
			toolTip="Show in sliding windows"
			enabled="{editorStack is SuperTabNavigator &amp;&amp; stack.selectedIndex==0}" />
	  </mx:HBox>
  </mx:VBox>

  <!-- Multiple selection -->

  <mx:VBox id="multiplePanel" width="100%" height="100%" horizontalScrollPolicy="off" styleName="dndPanelVbox">
    <potlatch2:TagGrid id="multiAdvancedTagGrid" width="100%" height="75%" />
	<mx:HBox horizontalAlign="right" width="100%">
	  <mx:LinkButton label="Delete" click="multiAdvancedTagGrid.removeTag()" enabled="{multiAdvancedTagGrid.selectedItem != null? true : false}"/>
	  <mx:LinkButton label="Add" click="multiAdvancedTagGrid.addNewTag()" />
	</mx:HBox>

    <mx:DataGrid editable="true" width="100%" height="25%" id="multiRelationsGrid"
        doubleClickEnabled="true"
        itemDoubleClick="editRelation(multiRelationsGrid.selectedItem.id)"
        doubleClick="if (event.target.parent==multiRelationsGrid) { addToRelation(); }">
        <mx:columns>
            <mx:DataGridColumn editable="false" dataField="description" headerText="Relation"/>
            <mx:DataGridColumn editable="false" dataField="id_idx" headerText="ID"/>
            <mx:DataGridColumn editable="true" dataField="role" headerText="Role">
                <mx:itemEditor><mx:Component><mx:TextInput restrict="&#x0020;-&#x10FFFF;" /></mx:Component></mx:itemEditor>
            </mx:DataGridColumn>
			<mx:DataGridColumn width="20" editable="false">
				<mx:itemRenderer>
					<mx:Component>
	                    <mx:HBox horizontalAlign="center" verticalAlign="middle">
							<mx:PopUpButton arrowButtonWidth="12" paddingLeft="0" paddingRight="0" width="12" height="12" 
							                open="{outerDocument.updateRelationMenu(event);}" 
							                creationComplete="{outerDocument.createRelationMenu(PopUpButton(event.target));}"/>
						</mx:HBox>
					</mx:Component>
				</mx:itemRenderer>
			</mx:DataGridColumn>
        </mx:columns>
    </mx:DataGrid>
    <mx:HBox horizontalAlign="right" width="100%">
      <mx:LinkButton label="Remove from" click="removeFromRelation(multiRelationsGrid.selectedItem.id)"
                      enabled="{multiRelationsGrid.selectedItem != null? true : false}"/>
      <mx:LinkButton label="Add to" click="addToRelation()"/>
    </mx:HBox>

  </mx:VBox>

  <!-- Multiple selection but items cannot be edited -->

  <mx:VBox id="multipleInvalidPanel" width="100%" height="100%" horizontalScrollPolicy="off" styleName="dndPanelVbox">
	<mx:Text id="multipleInvalidPanelText" text="You have selected multiple items." width="100%" styleName="helpInfo" />
  </mx:VBox>

  <!-- Generic marker panel -->

  <mx:VBox id="markerPanel" width="100%" height="100%" horizontalScrollPolicy="off" styleName="dndPanelVbox">
    <sidepanel:MarkerPanel id="markerPanelContents" width="100%"/>
  </mx:VBox>

  <!-- Bug editing panel -->

  <mx:VBox id="bugPanel" width="100%" height="100%" horizontalScrollPolicy="off" styleName="dndPanelVbox">
    <sidepanel:BugPanel id="bugPanelContents" width="100%"/>
  </mx:VBox>

</mx:ViewStack>

  <mx:Script><![CDATA[
      import net.systemeD.halcyon.connection.*;
      import net.systemeD.halcyon.VectorLayer;
      import net.systemeD.potlatch2.mapfeatures.*;

      import mx.collections.*;
      import mx.containers.*;
      import mx.events.*;
      import mx.core.*;
      import mx.managers.PopUpManager;
      import mx.controls.Menu;
      import flash.geom.Point;
      import flash.net.*;
      import mx.events.DragEvent;
      import mx.managers.DragManager;
      import mx.core.DragSource;
      import flexlib.containers.SuperTabNavigator;

      private static const dndPrompt:String="Add new points by dragging them onto the map";

      private var editorStackTabNavigator:SuperTabNavigator;
      private var editorStackAccordion:Accordion;
      [Bindable] private var editorStack:Container;

      public var mapFeatures:MapFeatures;
      private var selectedEntity:Entity;
      private var currentCategorySelector:CategorySelector;
      private var categorySelectors:Object = {};	// hash of categorySelectors for each limitType
      private var feature:Feature = null;

      private var rowData:Object;		// relation membership reference, needed so it's accessible from relation actions menu

	  public function setEntity(entities:Array, layer:VectorLayer=null):void {
		UIComponent.suspendBackgroundProcessing();

		var firstSelected:Entity=null;
		if (entities.length==1) { firstSelected=entities[0]; }

		if (selectedEntity!=firstSelected && selectedEntity!=null) {
			selectedEntity.removeEventListener(Connection.TAG_CHANGED, tagChanged);
			selectedEntity.removeEventListener(Connection.ADDED_TO_RELATION, addedToRelation);
			selectedEntity.removeEventListener(Connection.REMOVED_FROM_RELATION, removedFromRelation);
		}

		if (entities.length==0) {
			// Nothing selected, so show drag-and-drop panel
			sidebar.selectedChild = dndPanel;

		} else if (entities.length==1) {
			// Single entity selected, so show tag panel
			selectedEntity=firstSelected;
			if (selectedEntity!=null) { selectedEntity.addEventListener(Connection.TAG_CHANGED, tagChanged); }
			if (advancedID!=null) { setupAdvanced(firstSelected); }
			if (firstSelected is Relation) { stack.addChild(membersVBox); }
            if (selectedEntity is Marker && layer is BugLayer) {
              bugPanelContents.init(selectedEntity, layer);
              sidebar.selectedChild = bugPanel;
            } else if (selectedEntity is Marker) {
              markerPanelContents.init(selectedEntity, layer);
              sidebar.selectedChild = markerPanel;
            } else {
              refreshFeatureIcon();
              initialiseEditors();
              sidebar.selectedChild = tagsPanel;
            }

		} else if(isMultipleEditable(entities)) {
			selectedEntity = new EntityCollection(entities);
			selectedEntity.addEventListener(Connection.TAG_CHANGED, tagChanged);
            sidebar.selectedChild = multiplePanel;
			setupMultiAdvanced(selectedEntity);

		} else {
			//The selection contains elements which can't be edited all together.
			sidebar.selectedChild = multipleInvalidPanel;
		}
		UIComponent.resumeBackgroundProcessing();
      }

      private function refreshFeatureIcon():void {
          var oldFeature:Feature = feature;
          feature = selectedEntity == null ? null : mapFeatures.findMatchingFeature(selectedEntity);
          if ( feature != oldFeature ) {
              if ( oldFeature != null )
                  oldFeature.removeEventListener("imageChanged", featureImageChanged);
              if ( feature != null )
                  feature.addEventListener("imageChanged", featureImageChanged);
          }
          setCategorySelector(selectedEntity, feature);
      }

      private function featureImageChanged(event:Event):void {
          setCategorySelector(selectedEntity, feature);
      }

      /** Set the icon, categorySelector and help text for the current entity. */
      private function setCategorySelector(entity:Entity, feature:Feature):void {
			// Remove the "user has selected something" event listener from previous categorySelector,
			// and make it invisible because Flex is crap at updating click areas otherwise
			if (currentCategorySelector) { 
				currentCategorySelector.removeEventListener("selectedType", changeFeatureType);
				currentCategorySelector.visible=false;
			}
			
			// Have we cached the categorySelector for this limitType? If not, create one
			var lt:String=limitType(entity);
			if (!categorySelectors[lt]) {
				categorySelectors[lt]=new CategorySelector();
				categorySelectors[lt].setLimitTypes(lt);
			}
			currentCategorySelector=categorySelectors[lt];
			currentCategorySelector.addEventListener("selectedType", changeFeatureType, false, 0, true);

			// Update surrounding icon/text display
			if (feature) {
				iconImage.source = feature.image;
				iconText.htmlText = feature.htmlDetails(entity);
				popupChange.label = feature.name;
				helpLabel.visible = feature.hasHelpURL();
				currentCategorySelector.setSelectedFeature(feature);
			} else {
				iconImage.source = null;
				popupChange.label = "unknown";
				helpLabel.visible = false;
				if (entity==null) {
					iconText.htmlText = "<i>Nothing selected</i>";
				} else if (entity.hasTags()) {
					iconText.htmlText = "<b>Not recognised</b><br/><font size='10pt'>Try looking at the tags under the advanced properties</font>";
				} else {
					iconText.htmlText = "<b>No tags set</b><br/><font size='10pt'>Please use the menu below to define what this "+entity.getType()+" is</font>";
				}
			}

			// Set it as the popup, and make sure it's visible
			popupChange.popUp=currentCategorySelector;
			currentCategorySelector.visible=true;
      }

	  private function isMultipleEditable(entities:Array):Boolean {
		for each(var entity:Entity in entities) {
			if(!(entity is Node || entity is Way))
				return false;
		}
		return true;
	  }

      private function limitType(entity:Entity):String {
          if      (entity is Node    ) return "point";
          else if (entity is Way     ) return Way(entity).isArea() ? "area" : "line";
          else if (entity is Relation) return "relation";
          return null;
      }

      private var tabComponents:Object = {};

      private function initialiseEditors():void {
          editorStack.removeAllChildren();
          if ( selectedEntity == null || feature == null )
              return;

          var editorBox:VBox = createEditorBox();
          editorBox.label = "Basic";
          editorStack.addChild(editorBox);

          var tabs:Object = {};
          tabComponents = {};

          for each (var factory:EditorFactory in feature.editors) {
              if ( factory.presence.isEditorPresent(factory, selectedEntity, null) ) {
                  var editor:DisplayObject = factory.createEditorInstance(selectedEntity);
                  if ( editor != null )
                      editorBox.addChild(editor);
              }
              var category:String = factory.category;
              if (category!='') {
	              var tab:VBox = tabs[category];
	              if ( tab == null) {
	                  tab = createEditorBox();
	                  tab.label = category;
	                  editorStack.addChild(tab);
	                  tabs[category] = tab;
	                  tabComponents[tab] = [];
	              }
	              var catEditor:DisplayObject = factory.createEditorInstance(selectedEntity);
	              if ( catEditor != null )
	                  tabComponents[tab].push(catEditor);
	              //    tab.addChild(catEditor);
              }
          }
      }

      private function createEditorBox():VBox {
          var box:VBox = new VBox();
          box.percentWidth = 100;
          box.percentHeight = 100;
          box.styleName = "dndEditorContainer";
          return box;
      }

      private function ensureEditorsPopulated(tab:VBox):void {
          var components:Array = tabComponents[tab];
          if ( components == null || tab == null || tab.numChildren >= components.length )
              return;
          for each (var component:DisplayObject in components ) {
              tab.addChild(component);
          }
      }

	private function initEditorStackUIs():void {
		editorStackTabNavigator = new SuperTabNavigator();
		editorStackTabNavigator.allowTabSqueezing=false;
		editorStackTabNavigator.minTabWidth=10;
		editorStackTabNavigator.closePolicy="close_never";
		editorStackTabNavigator.scrollSpeed=20;
		editorStackTabNavigator.creationPolicy="auto";
		editorStackTabNavigator.percentWidth=100;
		editorStackTabNavigator.percentHeight=100;
		editorStackTabNavigator.styleName="dndStackTab";
		editorStackTabNavigator.popUpButtonPolicy="off"


		editorStackAccordion = new Accordion();
		editorStackAccordion.percentWidth=100;
		editorStackAccordion.percentHeight=100;
		editorStackAccordion.creationPolicy="auto";
		editorStackAccordion.styleName="dndStackAccordion";

		setEditorStackUI(true);
	}

	private function setEditorStackUI(isTabbed:Boolean):void {
		var children:Array=[]; var i:uint;

		if (editorStack) {
			// blank existing component
			editorStack.removeEventListener("change",editorStackUIChange);
			editorStack.removeEventListener("updateComplete",editorStackUIUpdate);
			editorStack.removeAllChildren();
			editorContainer.removeChildAt(1);
		}

		// replace with new component
		editorStack = (isTabbed ? editorStackTabNavigator : editorStackAccordion) as Container;
		editorContainer.addChild(editorStack);

		// re-add children and listeners
		initialiseEditors();
		editorStack.addEventListener("change",editorStackUIChange);
		editorStack.addEventListener("updateComplete",editorStackUIUpdate);
	}

	private function editorStackUIChange(event:Event):void {
		ensureEditorsPopulated(IndexChangedEvent(event).relatedObject as VBox);
	}

	private function editorStackUIUpdate(event:Event):void {
		if (editorStack is SuperTabNavigator) {
			var e:SuperTabNavigator = editorStack as SuperTabNavigator;
			if (e.selectedIndex<0) { return; }
			for (var i:uint=0; i<e.numChildren; i++) {
				e.getTabAt(i).selected=(i==e.selectedIndex);
			}
		}
	}


	public function togglePanel():void {
		if (stack.selectedChild==editorContainer && selectedEntity!=null) {
			stack.selectedChild=advancedContainer;
		} else if (stack.selectedChild!=editorContainer) {
			stack.selectedChild=editorContainer;
		}
	}

	public function selectAdvancedPanel():void {
		checkAdvanced();
		stack.selectedChild=advancedContainer;
	}

      private function checkAdvanced():void {
          if ( selectedEntity != null )
             setupAdvanced(selectedEntity);
      }

      /**
      * When you enter a new tag and press enter, the focus moves to the add button
      * Adding an event listener to the button and listening for + means that you
      * can add two consecutive tags with the same keypress. This relies on focus
      * moving to the "add" button, though, so it's not robust to rearranging the UI.
      */
      private function advancedAddButtonKeyboardEvent(event:KeyboardEvent):void {
          switch (event.keyCode) {
            case 187:   addNewTag(); break;                          // + - add tag
            case 107:   addNewTag(); break;                          // numpad plus
          }
      }

      private var listeningToRelations:Array = [];

      private function setupAdvanced(entity:Entity):void {
		if (!advancedTagGrid) advancedContainer.createComponentsFromDescriptors();	// if Flex hasn't created it, force it
		advancedTagGrid.init(entity);
        advancedAddButton.addEventListener(KeyboardEvent.KEY_DOWN, advancedAddButtonKeyboardEvent, false, 0, true);
        advancedDeleteButton.addEventListener(KeyboardEvent.KEY_DOWN, advancedAddButtonKeyboardEvent, false, 0, true);

		if ( entity == null ) {
			advancedID.htmlText = "";
		} else {
			var entityText:String = "xx";
			if      ( entity is Node     ) entityText = "Node";
			else if ( entity is Way      ) entityText = "Way";
			else if ( entity is Relation ) entityText = "Relation";
			advancedID.htmlText = entityText+": <b>"+entity.id+"</b>";
		}

		removeRelationListeners();

		if ( entity == null ) {
			relationsGrid.dataProvider = null;
		} else {
			resetRelationsGrid(entity);
			entity.addEventListener(Connection.ADDED_TO_RELATION, addedToRelation);
			entity.addEventListener(Connection.REMOVED_FROM_RELATION, removedFromRelation);
		}
      }

	  private function setupMultiAdvanced(entity:Entity):void {
		multiAdvancedTagGrid.init(entity);
		resetRelationsGrid(entity);
		entity.addEventListener(Connection.ADDED_TO_RELATION, addedToRelation, false, 0, true);
		entity.addEventListener(Connection.REMOVED_FROM_RELATION, removedFromRelation, false, 0, true);
      }

	  public function addNewTag():void {
		if (stack.selectedChild!=advancedContainer) { return; }
		advancedTagGrid.addNewTag();
	  }

      private function addedToRelation(event:RelationMemberEvent):void {
         resetRelationsGrid(selectedEntity);
      }

      private function removedFromRelation(event:RelationMemberEvent):void {
         resetRelationsGrid(selectedEntity);
      }

      private function removeRelationListeners():void {
          for each( var rel:Relation in listeningToRelations ) {
              rel.removeEventListener(Connection.TAG_CHANGED, relationTagChanged);
              rel.removeEventListener(Connection.RELATION_MEMBER_ADDED, entityRelationMemberChanged);
              rel.removeEventListener(Connection.RELATION_MEMBER_REMOVED, entityRelationMemberChanged);
          }
          listeningToRelations = [];
          if (relationsGrid) relationsGrid.removeEventListener(DataGridEvent.ITEM_EDIT_END, relationRoleChanged);
          if (multiRelationsGrid) multiRelationsGrid.removeEventListener(DataGridEvent.ITEM_EDIT_END, relationRoleChanged);
      }

      private function resetRelationsGrid(entity:Entity):void {
          removeRelationListeners();

          var instance:DataGrid=relationsGrid;
          if (entity is EntityCollection) instance=multiRelationsGrid;
          var memberships:Array = entity.getRelationMemberships();
          for each (var m:Object in memberships) {
              m.relation.addEventListener(Connection.TAG_CHANGED, relationTagChanged);
              m.relation.addEventListener(Connection.RELATION_MEMBER_ADDED, entityRelationMemberChanged);
              m.relation.addEventListener(Connection.RELATION_MEMBER_REMOVED, entityRelationMemberChanged);
              listeningToRelations.push(m.relation);
          }
          instance.dataProvider = memberships;
          instance.addEventListener(DataGridEvent.ITEM_EDIT_END, relationRoleChanged, false, -100);
      }

      private function relationRoleChanged(event:DataGridEvent):void {
		if (event.dataField != 'role') { return; }	// shouldn't really happen

		var relations:Array=event.currentTarget.dataProvider.toArray();
		var props:Object=relations[event.rowIndex];

		var relation:Relation=props['relation'];
		var newRole:String=event.itemRenderer.data['role'];

		if (selectedEntity is EntityCollection) {
			for each (var entity:Entity in EntityCollection(selectedEntity).entities) {
				var indexes:Array=relation.findEntityMemberIndexes(entity);
				for each (var index:int in indexes) {
					relation.setMember(index, new RelationMember(entity,newRole));
				}
			}
		} else {
			relation.setMember(props['index'], new RelationMember(selectedEntity,newRole));
		}
      }

      private function relationTagChanged(event:TagEvent):void {
          resetRelationsGrid(selectedEntity);
      }

      private function entityRelationMemberChanged(event:RelationMemberEvent):void {
          resetRelationsGrid(selectedEntity);
      }

      private function checkMembers():void {
          if (selectedEntity is Relation) {
            setupMembers(selectedEntity as Relation);
          }
      }

      private function setupMembers(rel:Relation):void {
          var members:Array = [];
          for (var i:int=0 ; i<rel.length; i++) {
            var props:Object = {};
            var member:RelationMember = rel.getMember(i);
            props["id"] = member.entity.id;
            props["type"] = member.entity.getType();
            props["role"] = member.role;

            members.push(props);
          }
          membersGrid.dataProvider = members;
          membersGrid.dataProvider.addEventListener('collectionChange', membersChange);
      }

      private function membersChange(event:Event):void {
          // Dropping all the members and re-adding them isn't exactly optimal
          // but is at least robust for any kind of change.
          // Figuring out a better way is someone else's FIXME

          var conn:Connection = Connection.getConnectionInstance();
          var rel:Relation = selectedEntity as Relation
          var action:CompositeUndoableAction = new CompositeUndoableAction("Rearrange relation members for "+rel);

          // drop members
          for (var i:int=rel.length-1 ; i>=0; i--) {
            rel.removeMemberByIndex(i, action.push);
          }

          // add members in new order
          for each(var memberObject:Object in membersGrid.dataProvider) {
            var e:Entity;
            var id:Number = memberObject.id;
            if(memberObject.type == 'node') {
              e = conn.getNode(id);
            } else if (memberObject.type == 'way') {
              e = conn.getWay(id);
            } else if (memberObject.type == 'relation') {
              e = conn.getRelation(id);
            }
            rel.appendMember(new RelationMember(e, memberObject.role), action.push);
          }
          MainUndoStack.getGlobalStack().addAction(action);
      }

      private function editRelation(id:Number):void {
          var panel:RelationEditorPanel = RelationEditorPanel(
              PopUpManager.createPopUp(Application(Application.application), RelationEditorPanel, true));
          panel.setRelation(Connection.getConnectionInstance().getRelation(id));
          PopUpManager.centerPopUp(panel);
      }

	/** Create relation actions menu */

	public function createRelationMenu(button:PopUpButton):void {
		var menu:Menu = new Menu(); 
		var dp:Object = [ {label: "Select all members"}, 
						  {label: "Deselect all members"}, 
						  {label: "Add selection to this relation", enabled: false} ]; 
		menu.dataProvider = dp; 
		menu.addEventListener("itemClick", selectRelationMenu); 
		button.popUp = menu;
	}

	/** Enable 'add selection to...' entry only if some of the selection isn't in the relation.
	    Called each time the menu is clicked. */
	
	public function updateRelationMenu(event:Event):void {
		rowData=event.target.parent.data;	// this makes it accessible from selectRelationMenu
		var menu:Menu = Menu(event.target.popUp);
		var enable:Boolean = false;
		if (selectedEntity != null && selectedEntity is EntityCollection) {
			// Enable only if some entities aren't a member of the relation
			enable=!rowData.universal;
		}
		if (enable==menu.dataProvider[2].enabled) return;
		menu.dataProvider[2].enabled=enable;
		menu.invalidateList();
	}

	/** Do the action selected in the relation actions menu */

	public function selectRelationMenu(event:MenuEvent):void {
		var rel:Relation=rowData.relation;
		var entities:Array;
		var controller:EditController=Application.application.theController;
		switch (event.index) {
			case 0: // Select all members
				entities=selectedEntity.entities.concat(rel.memberEntities);
				entities=entities.filter(function(e:*, i:int, arr:Array):Boolean { return arr.indexOf(e) == i } );	// remove duplicates
				// ** FIXME: This is a really horrible way of changing the controller state
				controller.setState(controller.findStateForSelection(entities));
				break;

			case 1: // Deselect all members
				entities=selectedEntity.entities;
				entities=entities.filter(function(e:*, i:int, arr:Array):Boolean { return !e.hasParent(rel) } );
				controller.setState(controller.findStateForSelection(entities));
				break;

			case 2: // Add selection to this relation
				var undo:CompositeUndoableAction=new CompositeUndoableAction("Remove selection from relations");
				for each (var entity:Entity in selectedEntity.entities) {
					if (!entity.hasParent(rel)) {
						rel.appendMember(new RelationMember(entity,''), undo.push);
					}
				}
				MainUndoStack.getGlobalStack().addAction(undo);
				break;
		}
	}

      private function tagChanged(event:TagEvent):void {
	      if(selectedEntity != null && selectedEntity is EntityCollection) {
			setupMultiAdvanced(selectedEntity);
		    return;
		  }

          refreshFeatureIcon();
          // ** FIXME - changing tags on Advanced tab should update simple view
          // (but putting initialiseEditors here breaks other stuff, because it causes
          // the Basic pane to be selected)

          // if the advancedTagGrid has already been set up, it needs to be refreshed.
          // FIXME make this better, maybe advancedTagGrid should be event listening.
          if(advancedContainer.initialized) {
            checkAdvanced();
          }
      }

      public function loadFeatures():void {
          mapFeatures = MapFeatures.getInstance();
          stack.removeChild(membersVBox); // remove by default, will be added if relation
      }

      /** Open up a new browser page, showing the help page as defined in Map Features XML file .*/
      public function openDescription():void {
          if ( feature != null && feature.hasHelpURL() )
              navigateToURL(new URLRequest(feature.helpURL), "potlatch_help");
      }

      /** Open up a new browser page showing OSM's view of the current entity. */
      public function openEntityPage():void {
          if (selectedEntity != null && selectedEntity.id >= 0) {
              // This is slightly hard-coded, but not drastically. The ../s could be changed for string manipulation of the apiBase
              var urlBase:String = Connection.getConnectionInstance().apiBase + '../../browse/'
              navigateToURL(new URLRequest(urlBase+selectedEntity.getType()+'/'+selectedEntity.id), "potlatch_browse");
          }
      }

      public function addToRelation():void {
          new RelationSelectPanel().init(selectedEntity,new Object());
      }

      private function removeFromRelation(id:Number, index:int=-1):void {
		var rel:Relation=Connection.getConnectionInstance().getRelation(id);
		if (index>-1) {
			rel.removeMemberByIndex(index, MainUndoStack.getGlobalStack().addAction);
		} else if (selectedEntity is EntityCollection) {
			var undo:CompositeUndoableAction=new CompositeUndoableAction("Remove selection from relations");
			for each (var e:Entity in EntityCollection(selectedEntity).entities) rel.removeMember(e,undo.push);
			MainUndoStack.getGlobalStack().addAction(undo);
		}
      }

      public function changeFeatureType(event:Event):void {
          if ( selectedEntity == null )
              return;

          UIComponent.suspendBackgroundProcessing();
          var newFeature:Feature = currentCategorySelector.selectedType;
          var undoStack:Function = MainUndoStack.getGlobalStack().addAction;
          var action:CompositeUndoableAction = new CompositeUndoableAction(
                  "Set "+selectedEntity.getType()+" "+selectedEntity.id+" to "+newFeature.name);
		  selectedEntity.suspend();

          // remove tags from the current feature
          if ( feature != null ) {
              for each( var oldtag:Object in feature.tags ) {
                  selectedEntity.setTag(oldtag["k"], null, action.push);
              }
          }

          // set tags for new feature
          if ( newFeature != null ) {
              for each( var newtag:Object in newFeature.tags ) {
                  selectedEntity.setTag(newtag["k"], newtag["v"], action.push);
              }
          }

		  selectedEntity.resume();
          undoStack(action);
          popupChange.close();
          initialiseEditors();
          UIComponent.resumeBackgroundProcessing();
      }

	private function resizePOIGrid(event:Event):void {
		var rows:Number=event.target.dataProvider.length/event.target.columnCount;
		if (rows!=Math.floor(rows)) { rows=Math.floor(rows+1); }
		event.target.height=rows*(event.target.rowHeight+1);
	}
  ]]></mx:Script>
</mx:VBox>

