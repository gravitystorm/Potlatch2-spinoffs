<?xml version="1.0" encoding="utf-8"?>
<mx:Panel
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:potlatch2="net.systemeD.potlatch2.*"
	height="76" width="129" layout="absolute"
	styleName="theToolBox">

		<mx:Image data="@Embed('../../../embedded/close_small.png')"
			includeInLayout="false" id="toolboxClose" click="toggle();" 
			y="-6" x="115" />

		<!-- Top row -->

		<mx:Button icon="@Embed('../../../embedded/delete.svg')"
			click='doDelete();' 
			enabled="{canDo('delete')}" 
			alpha="{getAlpha('delete')}" 
			toolTip="{deleteToolTipText()}" 
			width="28" height="28" textAlign="left" y="4" x="6" paddingLeft="6" paddingRight="0" />
		<mx:Button icon="@Embed('../../../embedded/direction.svg')" 
			click='doReverseDirection();'
			enabled="{canDo('reverseDirection')}" 
			alpha="{getAlpha('reverseDirection')}" 
			toolTip="Reverse direction (V)" 
			width="28" height="28" textAlign="left" y="4" x="36" paddingLeft="8" paddingRight="0" />
		<mx:Button icon="@Embed('../../../embedded/cut.svg')" 
			click='doSplit();'
			enabled="{canDo('split')}" 
			alpha="{getAlpha('split')}" 
			toolTip="Split way (X)" 
			width="28" height="28" textAlign="left" y="4" x="66" paddingLeft="8" paddingRight="0" />
		<mx:Button icon="@Embed('../../../embedded/merge.svg')" 
			click='doMerge();'
			enabled="{canDo('merge')}" 
			alpha="{getAlpha('merge')}" 
			toolTip="Merge ways" 
			width="28" height="28" textAlign="left" y="4" x="96" paddingLeft="3" paddingRight="0" />

		<!-- Second row -->

		<mx:Button icon="@Embed('../../../embedded/straighten.svg')" 
			click='doStraighten();' 
			enabled="{canDo('straighten')}" 
			alpha="{getAlpha('straighten')}" 
			toolTip="Straighten way" 
			width="28" height="28" textAlign="left" y="34" x="6" paddingLeft="5" paddingRight="0" />
		<mx:Button icon="@Embed('../../../embedded/circle.svg')" 
			click='doCircularise();' 
			enabled="{canDo('circularise')}" 
			alpha="{getAlpha('circularise')}" 
			toolTip="Make circular" 
			width="28" height="28" textAlign="left" y="34" x="36" paddingLeft="4" paddingRight="0" />
		<mx:Button icon="@Embed('../../../embedded/quadrilateralise.svg')" 
			click='doQuadrilateralise();' 
			enabled="{canDo('quadrilateralise')}" 
			alpha="{getAlpha('quadrilateralise')}" 
			toolTip="Make right-angled (Q)"
			width="28" height="28" textAlign="left" y="34" x="66" paddingLeft="6" paddingRight="0" />
		<mx:Button icon="@Embed('../../../embedded/parallel.svg')" 
			click='doParallelise();' 
			enabled="{canDo('parallelise')}" 
			alpha="{getAlpha('parallelise')}" 
			toolTip="Create parallel way (P)" 
			width="28" height="28" textAlign="left" y="34" x="96" paddingLeft="8" paddingRight="0" />

	<mx:Script><![CDATA[

		import flash.events.Event;
		import flash.events.MouseEvent;
		import net.systemeD.halcyon.connection.*;
		import net.systemeD.halcyon.connection.actions.*;
		import net.systemeD.potlatch2.controller.*;
		import net.systemeD.potlatch2.tools.*;

		private var controller:EditController;

		public function init(controller:EditController):void {
			this.controller=controller;
			/* check if the toolbox was explictly turned off in a previous session */
			if( SharedObject.getLocal("user_state").data['toolbox_visible'] == false) {
			  this.visible = false;
			}
		}

		override protected function createChildren():void {
			super.createChildren();
			super.titleBar.addEventListener(MouseEvent.MOUSE_DOWN,handleDown);
			super.titleBar.addEventListener(MouseEvent.MOUSE_UP,handleUp);
		}

		public function updateSelectionUI():void {
			dispatchEvent(new Event("updateSkin"));
			dispatchEvent(new Event("updateAlpha"));
		}

		private function handleDown(e:Event):void {
			this.startDrag();
		}

		private function handleUp(e:Event):void {
			this.stopDrag();
		}
		
		public function toggle():void {
			this.visible=!this.visible;
			var obj:SharedObject = SharedObject.getLocal("user_state");
			obj.setProperty("toolbox_visible",this.visible);
			obj.flush();
		}
		
		// --------------------------------------------------------------------------------
		// Enable/disable toolbox buttons
		// (ideally we'd use CSS to set alpha in disabled state, but Flex's CSS
		//	capabilities aren't up to it)
		
		[Bindable(event="updateSkin")]
		public function canDo(op:String):Boolean {
			if (controller.state.selectCount==0) return false;

			switch (op) {
				case 'delete':				return true;
				case 'reverseDirection':	return controller.state.hasSelectedWays();
				case 'quadrilateralise':	return (controller.state.hasSelectedAreas() || controller.state.hasSelectedWayNodesInAreas());
				case 'straighten':			return controller.state.hasSelectedUnclosedWays();
				case 'circularise':			return controller.state.hasSelectedAreas();
				case 'split':				return (controller.state is SelectedWayNode);
				case 'parallelise':			return (controller.state is SelectedWay);
				case 'merge':				return controller.state.hasAdjoiningWays();
			}
			return false;
		}

		[Bindable(event="updateAlpha")]
		public function getAlpha(op:String):Number {
			if (canDo(op)) { return 1; }
			return 0.5;
		}

		[Bindable(event="updateSkin")]
		private function deleteToolTipText():String {
			var entity:Entity=controller.state.firstSelected;
			if (entity is Node) { return "Delete Node (Delete)"; }
			if (entity is Way && Way(entity).isArea()) { return "Delete Area (Shift+Delete)"; }
			if (entity is Way) { return "Delete Way (Shift+Delete)"; }
			return "Delete Item"; // When nothing is selected
		}

		// --------------------------------------------------------------------------------
		// Individual toolbox actions

		public function doDelete():void {
			var undo:CompositeUndoableAction = new CompositeUndoableAction("Delete objects");
			for each (var entity:Entity in controller.state.selection) {
				if (entity is Node) { controller.connection.unregisterPOI(Node(entity)); }
				entity.remove(undo.push);
			}
			MainUndoStack.getGlobalStack().addAction(undo);

			if (controller.state is SelectedWayNode) {
				controller.setState(new SelectedWay(SelectedWayNode(controller.state).selectedWay));
			} else {
				controller.setState(new NoSelection());
			}
		}
		
		public function doMerge():void {
			controller.setState(SelectedMultiple(controller.state).mergeWays());
		}

		public function doReverseDirection():void {
			var undo:CompositeUndoableAction = new CompositeUndoableAction("Reverse direction of objects");
			for each (var way:Way in controller.state.selectedWays) {
				way.reverseNodes(undo.push);
			}
			MainUndoStack.getGlobalStack().addAction(undo);
		}

		public function doQuadrilateralise():void {
			var undo:CompositeUndoableAction = new CompositeUndoableAction("Make objects right-angled");
			for each (var way:Way in controller.state.selectedWays) {
				Quadrilateralise.quadrilateralise(way, undo.push);
			}
            for each (var node:Node in controller.state.selectedNodes) {
                for each (var parentWay:Way in node.parentWays) {
                  Quadrilateralise.quadrilateralise(parentWay, undo.push);
                }
            }
			MainUndoStack.getGlobalStack().addAction(undo);
		}

		public function doStraighten():void {
			var undo:CompositeUndoableAction = new CompositeUndoableAction("Straighten objects");
			for each (var way:Way in controller.state.selectedWays) {
				Straighten.straighten(way, controller.map, undo.push);
			}
			MainUndoStack.getGlobalStack().addAction(undo);
		}

		public function doCircularise():void {
			var undo:CompositeUndoableAction = new CompositeUndoableAction("Make objects circular ");
			for each (var way:Way in controller.state.selectedWays) {
				Circularise.circularise(way, controller.map, undo.push);
			}
			MainUndoStack.getGlobalStack().addAction(undo);
		}

		public function doSplit():void {
			if (controller.state is SelectedWayNode) {
				controller.setState(SelectedWayNode(controller.state).splitWay());
			}
		}
		
		public function doParallelise():void {
			if (controller.state is SelectedWay) {
				controller.setState(new SelectedParallelWay(Way(controller.state.firstSelected)));
			}
		}


	]]>
</mx:Script>	
</mx:Panel>
