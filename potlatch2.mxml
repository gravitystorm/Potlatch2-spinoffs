<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:halcyon="net.systemeD.halcyon.*"
	xmlns:potlatch2="net.systemeD.potlatch2.*"
	layout="vertical"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	horizontalAlign="center" 
	addedToStage="initApp()">
	
	<mx:Style source="styles/Application.css"/>

    <mx:Glow id="glowImage" duration="100" 
        alphaFrom="0.3" alphaTo="1.0" 
        blurXFrom="0.0" blurXTo="5.0" 
        blurYFrom="0.0" blurYTo="5.0" 
        color="0xFF8000"/>
    <mx:Glow id="unglowImage" duration="100" 
        alphaFrom="1.0" alphaTo="0.3" 
        blurXFrom="5.0" blurXTo="0.0" 
        blurYFrom="5.0" blurYTo="0.0" 
        color="0xFF8000"/>
    <mx:WipeLeft id="wipeOut" duration="250"/>
    <mx:WipeRight id="wipeIn" duration="250"/>

    <mx:ApplicationControlBar dock="true">
        <mx:PopUpButton id="bgButton" label="Background" openAlways="true"
            creationComplete="bgButton.popUp = new BackgroundSelector();"/>
        <mx:PopUpButton id="styleButton" label="Map Style" openAlways="true"
            creationComplete="styleButton.popUp = new StyleSelector();"/>
		<mx:PopUpMenuButton id="gpsButton" itemClick="if (event.index==0) { trackLoader.load(); } else { new MyGpxDialog().init(); }">
			<mx:dataProvider>
				<mx:Array>
					<mx:Object label="GPS data" />
					<mx:Object label="My tracks" />
				</mx:Array>
			</mx:dataProvider>
		</mx:PopUpMenuButton>
        <mx:Spacer width="100%"/>
        <mx:Button label="Undo" click="MainUndoStack.getGlobalStack().undo();"
            enabled="{MainUndoStack.getGlobalStack().canUndo()}"/>
        <mx:Button label="Redo" click="MainUndoStack.getGlobalStack().redo();"
            enabled="{MainUndoStack.getGlobalStack().canRedo()}"/>
        <mx:Spacer width="100%"/>
        <mx:Button label="Help" click="new HelpDialog().init();" />
        <mx:Button label="Options" click="new OptionsDialog().init();" /> 
        <mx:Button label="Save" icon="@Embed('embedded/save.svg')" click="SaveManager.saveChanges();" id="saveButton" 
			enabled="false"/>
    </mx:ApplicationControlBar>
    
    <mx:HDividedBox width="100%" height="100%">

	  <!-- Tag viewer -->
	  <potlatch2:TagViewer width="25%" height="100%" id="tagViewer"/>

      <mx:Canvas width="75%" height="100%">
        <mx:Canvas id="map_area" resize="onResizeMap()"
            top="0" left="0" width="100%" height="100%" dragEnter="dragEnterHandler(event);" dragDrop="dragDropHandler(event);">
        </mx:Canvas>
        <mx:Image source="@Embed('embedded/zoomIn.svg')" right="3" top="3" click="theMap.zoomIn();"
            rollOverEffect="glowImage" rollOutEffect="unglowImage" toolTip="{'Zoom in - currently z'+getScale()}" />
        <mx:Image source="@Embed('embedded/zoomOut.svg')" right="3" top="20" click="theMap.zoomOut();"
            rollOverEffect="glowImage" rollOutEffect="unglowImage" toolTip="{'Zoom out - currently z'+getScale()}" />
        <mx:TextArea id="dataWorking" text="" right="20" top="3" disabledColor="black" backgroundDisabledColor="0xFFFFEA" height="18"
            enabled="false" borderThickness="0"
            showEffect="{wipeIn}" hideEffect="{wipeOut}"/>

    </mx:Canvas>

    </mx:HDividedBox>

	<mx:Script><![CDATA[
		import net.systemeD.halcyon.*;
		import net.systemeD.halcyon.connection.*;
		import net.systemeD.potlatch2.*;
		import net.systemeD.potlatch2.save.SaveManager;
		import net.systemeD.potlatch2.controller.*;
		import net.systemeD.potlatch2.help.*;
		import net.systemeD.potlatch2.options.*;
		import net.systemeD.potlatch2.utils.*;
        import net.systemeD.potlatch2.mygpx.*;
		import mx.managers.PopUpManager;
		import flash.system.Security;
		import flash.net.*;
		import flash.events.MouseEvent;
		import flash.display.Sprite;
		import mx.core.IChildList;
        import mx.containers.Canvas;
		import mx.core.Application;
        import mx.events.DragEvent;
        import mx.managers.DragManager;
        import mx.core.DragSource;
        import mx.controls.Alert;

        public var theMap:Map;
        public var theController:EditController;
		public var yahoo:Yahoo;
		public var trackLoader:TrackLoader;
		public var toolbox:Toolbox;
        public var bugLoader:BugLoader;
        public var bikeShopLoader:BikeShopLoader;

		private var savecount:uint=0;
		private var loadcount:uint=0;

        include "version.as";

		private function initApp():void {

			Globals.vars.map_area = map_area;
			Globals.vars.root = map_area.rawChildren;			// set up global reference to root level
			var _root:IChildList = map_area.rawChildren;		// convenient local shorthand
			Globals.vars.nocache = loaderInfo.parameters['nocache'] == 'true';

			// populate sharedObject with loaderInfo parameters if supplied
			var obj:SharedObject = SharedObject.getLocal("user_state");
			var objChanged:Boolean = false;
			if (loaderInfo.parameters['tileurl']) {
				obj.setProperty('background_url',loaderInfo.parameters['tileurl']); 
				obj.setProperty('background_name','Custom'); 
				objChanged=true;
			}
			if (loaderInfo.parameters['style']) { 
				obj.setProperty('stylesheet_url',loaderInfo.parameters['style']);
				obj.setProperty('stylesheet_name','Custom');
				objChanged=true; 
			}
			if (objChanged) { obj.flush(); }

			// load imagery and style XML
	        var request:DebugURLRequest = new DebugURLRequest("imagery.xml");
	        var loader:URLLoader = new URLLoader();
	        loader.addEventListener(Event.COMPLETE, onImageryLoad);
	        loader.load(request.request);

			var request2:DebugURLRequest = new DebugURLRequest("stylesheets.xml");
			var loader2:URLLoader = new URLLoader();
	        loader2.addEventListener(Event.COMPLETE, onStylesheetsLoad);
	        loader2.load(request2.request);

			// map backdrop object
            var w:uint = map_area.width;
            var h:uint = map_area.height;
            var b:Sprite = new Sprite();
            b.height=h; b.width=w;
            b.graphics.beginFill(0xFFFFEA,100); 
            b.graphics.drawRect(0,0,w,h); 
            b.graphics.endFill();
			_root.addChild(b);

			// create map and Yahoo
			theMap=new Map(this.loaderInfo.parameters);

            // Auto-load vector backgrounds from config
            // This could go spectacularly wrong if map.init completes before the event listener below is added
            var vectorloader:AutoVectorBackground = new AutoVectorBackground(theMap);
            theMap.addEventListener(MapEvent.INITIALISED, function(e:Event):void {vectorloader.load();});

			theMap.backdrop=b;
			yahoo=new Yahoo(w,h,theMap);
			yahoo.hide();
			_root.addChild(yahoo);
			_root.addChild(theMap);
            theMap.updateSize(w,h);
			theMap.addEventListener(MapEvent.SCALE, scaleHandler);

			// add mask for map
			var s:Sprite=new Sprite();
			s.graphics.beginFill(0xFFFFFF,100);
			s.graphics.drawRect(0,0,w,h);
			s.graphics.endFill();
			_root.addChild(s);
			theMap.mask=s;

			// mouse-up handler attached to stage, so the user can release outside the map
			stage.addEventListener(MouseEvent.MOUSE_UP, theMap.mouseUpHandler);
			Globals.vars.map_area.addEventListener(MouseEvent.MOUSE_MOVE, theMap.mouseMoveHandler);
			Globals.vars.map_area.addEventListener(MouseEvent.MOUSE_DOWN, theMap.mouseDownHandler);

			// keyboard event attached to stage
			stage.addEventListener(KeyboardEvent.KEY_UP, theMap.keyUpHandler);

			// position toolbox
			toolbox=Toolbox(PopUpManager.createPopUp(this,Toolbox,false));
			toolbox.init(theController);
			toolbox.x=stage.stageWidth-toolbox.width-15;
			toolbox.y=stage.stageHeight-toolbox.height-15;

			// add debug field
			var t:TextField=new TextField();
			t.width=500; t.height=150; t.border=true;
			t.multiline=true;
			_root.addChild(t);
			Globals.vars.debug=t;
            t.visible = loaderInfo.parameters["show_debug"] == 'true';
			Globals.vars.root=theMap;	// just for the addDebug function

            theController = new EditController(theMap, tagViewer, toolbox);
            theController.setActive();
            
            var conn:Connection = Connection.getConnectionInstance();
            conn.addEventListener(Connection.LOAD_STARTED, onDataStart);
            conn.addEventListener(Connection.LOAD_COMPLETED, onDataComplete);
            conn.addEventListener(Connection.SAVE_STARTED, onDataStart);
            conn.addEventListener(Connection.SAVE_COMPLETED, onDataComplete);
            conn.addEventListener(Connection.DATA_DIRTY, onDataDirty);
            conn.addEventListener(Connection.DATA_CLEAN, onDataClean);
			conn.addEventListener(MapEvent.ERROR, onMapError);

            // set the access token from saved cookie
            var tokenObject:SharedObject = SharedObject.getLocal("access_token");
            conn.setAccessToken(tokenObject.data["oauth_token"], tokenObject.data["oauth_token_secret"]);

			// create GPS trackloader
			trackLoader=new TrackLoader(theMap,conn.apiBase);

            // Force authentication on startup, if required
            // force_auth == force => checks for access token, and displays OAuth panel if needed
            var force_auth:String = loaderInfo.parameters["force_auth"];
            if (!conn.hasAccessToken() && force_auth == 'force') {
              SaveManager.ensureAccess(onAccessChecked);
            }

            // show help dialog on startup, if required
            // show_help == always => on every startup
            // show_help == once => show on first startup only
            var show_help:String = loaderInfo.parameters["show_help"];

            if (show_help == 'always' || (show_help == 'once' && obj.data["help_shown"] != "true")) {
              new HelpDialog().init();
            }

            // Check if Tiger highlighting should be enabled from saved object
            Globals.vars.highlightTiger = obj.data['tiger_highlighted'];
		}
		
		public function onMapError(event:MapEvent):void {
			Alert.show(event.params.message, 'Error', mx.controls.Alert.OK);
		}

        public function onResizeMap():void {
            if ( theMap != null )
                theMap.updateSize(map_area.width, map_area.height);

			if (toolbox) {
				toolbox.x=Math.min(toolbox.x,stage.stageWidth-toolbox.width-15);
				toolbox.y=Math.min(toolbox.y,stage.stageHeight-toolbox.height-15);
			}
        }

        private function onDataStart(event:Event):void {
			switch (event.type) {
				case Connection.LOAD_STARTED:	loadcount++; break;
				case Connection.SAVE_STARTED:	savecount++; break;
			}
			updateDataWorking();
        }
        private function onDataComplete(event:Event):void {
			switch (event.type) {
				case Connection.LOAD_COMPLETED:	loadcount--; break;
				case Connection.SAVE_COMPLETED:	savecount--; break;
			}
            updateDataWorking();
        }
		private function updateDataWorking():void {
			if (loadcount>0 && savecount>0) { dataWorking.text="Loading/saving..."; }
			else if (loadcount>0)           { dataWorking.text="Loading data..."; }
			else if (savecount>0)           { dataWorking.text="Saving data..."; }
			else                            { dataWorking.text=""; }
			dataWorking.visible=(dataWorking.text!="");
		}
        private function onDataDirty(event:Event):void {
			saveButton.enabled=true;
            if (ExternalInterface.available) {
              ExternalInterface.call("markChanged", false);
            }
		}
		private function onDataClean(event:Event):void {
			saveButton.enabled=false;
            if (ExternalInterface.available) {
              ExternalInterface.call("markChanged", true);
            }
		}
		
        private function onImageryLoad(event:Event):void {
			var xml:XML = new XML(URLLoader(event.target).data);
			var saved:Object;
			if (SharedObject.getLocal("user_state").data['background_url']) {
				saved={ name: SharedObject.getLocal("user_state").data['background_name'],
						url:  SharedObject.getLocal("user_state").data['background_url' ] };
			} else {
				saved={ url: ''};
			}

			var isSet:Boolean=false;
            var backgroundSet:Boolean = false;

            theController.imagery=new Array(
				{ name: "None", url: "" },
				{ name: "Yahoo", url: "yahoo", sourcetag: "Yahoo" } );
			for each(var set:XML in xml.set) {
				var obj:Object={};
				var a:XML;
				for each (a in set.@*) { obj[a.name().localName]=a.toString(); }
				for each (a in set.* ) { obj[a.name()          ]=a.toString(); }
                theController.imagery.push(obj);
				if ((obj.url ==saved.url) ||
				    (obj.name==saved.name && obj.name!='Custom')) { isSet=true; }
			}

            if (!isSet && saved.name && saved.url && saved.url!='' && saved.url!='yahoo') {
                theController.imagery.push(saved);
                isSet=true;
            }

			for each (var bg:Object in theController.imagery) {
				if (bg.name==saved.name || bg.url==saved.url) {
					setBackground(bg);
                    backgroundSet = true;
				}
			}

            // For most contributors it's useful to set the background to yahoo by default, I reckon, but lets make it a config
            if (!backgroundSet && loaderInfo.parameters['yahoo_default'] == 'true') {
                setBackground(theController.imagery[1]);
            }
			FunctionKeyManager.instance().registerListener('Background imagery',
				function(o:String):void { setBackground(findBackgroundWithName(o)); });
		}
		
		public function setBackground(bg:Object):void {
			if (bg.url=='yahoo') { theMap.setBackground({url:''}); yahoo.show(); }
			                else { theMap.setBackground(bg      ); yahoo.hide(); }
			theController.imagerySelected=bg;
			var obj:SharedObject = SharedObject.getLocal("user_state");
			obj.setProperty('background_url' ,String(bg.url));
			obj.setProperty('background_name',String(bg.name));
			obj.flush();
		}
		
		private function findBackgroundWithName(name:String):Object {
			for each (var bg:Object in theController.imagery) {
				if (bg.name==name) { return bg; }
			}
			return { url:'' };
		}

		public function getAvailableImagery():Array {
			var available:Array=[];
			for each (var bg:Object in theController.imagery) {
				if (bg.minlon) {
					// if there's a bbox, check the current viewport intersects it
					if (((theMap.edge_l>bg.minlon && theMap.edge_l<bg.maxlon) ||
					     (theMap.edge_r>bg.minlon && theMap.edge_r<bg.maxlon) ||
					     (theMap.edge_l<bg.minlon && theMap.edge_r>bg.maxlon)) &&
					    ((theMap.edge_b>bg.minlat && theMap.edge_b<bg.maxlat) ||
					     (theMap.edge_t>bg.minlat && theMap.edge_t<bg.maxlat) ||
					     (theMap.edge_b<bg.minlat && theMap.edge_t>bg.maxlat))) {
						available.push(bg);
					}
				} else {
					// if there's no bbox (i.e. global set), include it anyway
					available.push(bg);
				}
			}
			return available;
		}

		private function onStylesheetsLoad(event:Event):void {
			var xml:XML = new XML(URLLoader(event.target).data);
			var saved_url:String = SharedObject.getLocal("user_state").data['stylesheet_url'];
			var saved_name:String= SharedObject.getLocal("user_state").data['stylesheet_name'];
			var isInMenu:Boolean=false, isSet:Boolean=false;

            // first, build the menu from the stylesheet list.
            // Also ensure the saved_url is in the menu (might be either saved from before, or supplied via loaderInfo)
            theController.stylesheets=new Array();
			for each(var set:XML in xml.stylesheet) {
				var obj:Object={};
				for (var a:String in set.children()) {
					obj[set.child(a).name()]=set.child(a);
				}
                theController.stylesheets.push(obj);
				if (obj.url==saved_url || (obj.name==saved_name && obj.name!='Custom')) { isInMenu=true; }
			}
			if (saved_url && !isInMenu) { theController.stylesheets.push({ name:saved_name, url:saved_url }); }

            // pick a stylesheet to be set. It should be the saved one, if it is in the menu
            // or alternatively the first one on the menu,
            // or finally try 'potlatch.css'
			for each (var ss:Object in theController.stylesheets) {
				if (ss.name==saved_name || ss.url==saved_url) {
					setStylesheet(ss.name, ss.url);
                    isSet = true;
                    break;
				}
			}
            if (!isSet) {
              if(theController.stylesheets.length > 0) {
                var s:Object = theController.stylesheets[0];
                setStylesheet(s.name, s.url);
              } else {
                //hit and hope. FIXME should this be an error state?
                theController.stylesheets.push({ name:'Potlatch', url:'potlatch.css'});
                setStylesheet('Potlatch','potlatch.css');
              }
            }
			FunctionKeyManager.instance().registerListener('Map style',
				function(o:String):void { setStylesheet(o,findStylesheetURLWithName(o)); });
		}

		public function setStylesheet(name:String,url:String):void {
			theMap.setStyle(url);
			var obj:SharedObject = SharedObject.getLocal("user_state");
			obj.setProperty("stylesheet_url",url);
			obj.setProperty("stylesheet_name",name);
			obj.flush();
		}

		private function findStylesheetURLWithName(name:String):String {
			for each (var ss:Object in theController.stylesheets) {
				if (ss.name==name) { return ss.url; }
			}
			return '';
		}

		private function scaleHandler(event:MapEvent):void {
			dispatchEvent(new Event("rescale"));
		}
		
		[Bindable(event="rescale")]
		private function getScale():String {
			return String(theMap.scale);
		}

        private function dragEnterHandler(event:DragEvent):void {
            // Get the drop target component from the event object.
            var dropTarget:Canvas=event.currentTarget as Canvas;
            // Accept the drag only if the user is dragging poi with tags
            if (event.dragSource.hasFormat('tags')) 
            {
                DragManager.acceptDragDrop(dropTarget);
            }
        }
        
        private function dragDropHandler(event:DragEvent):void {
			// Deselect the dragged icon
			if (event.dragSource.dataForFormat('container')) {
				event.dragSource.dataForFormat('container').selectedItem=-1;
			}

			// Get the tags
            var tags:Array = event.dragSource.dataForFormat('tags') as Array;
            var mapLoc:Point = Globals.vars.root.globalToLocal(new Point(event.stageX, event.stageY));
            var lat:Number = Globals.vars.root.coord2lat(mapLoc.y);
            var lon:Number = Globals.vars.root.coord2lon(mapLoc.x);
            
            var createAction:CompositeUndoableAction = new CompositeUndoableAction("Create POI");
            
            var node:Node = Connection.getConnectionInstance().createNode({}, lat, lon, createAction.push);
            for each ( var tag:Object in tags ) {
                node.setTag(tag.k, tag.v, createAction.push);
            }
			Connection.getConnectionInstance().registerPOI(node);
			MainUndoStack.getGlobalStack().addAction(createAction);
            theController.setState(new SelectedPOINode(node));
        }

        /* Called when forcing an initial access token check. */
        private function onAccessChecked():void {
            // Floaty panel message "You now have access";
        }

	]]></mx:Script>

</mx:Application>

