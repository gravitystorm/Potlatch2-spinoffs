<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:halcyon="net.systemeD.halcyon.*"
	xmlns:potlatch2="net.systemeD.potlatch2.*"
	layout="vertical"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	horizontalAlign="center" 
	addedToStage="initApp()"
	preloader="net.systemeD.potlatch2.Preloader">
	
	<mx:Style source="styles/Application.css"/>

    <mx:Glow id="glowImage" duration="100" 
        alphaFrom="0.3" alphaTo="1.0" 
        blurXFrom="0.0" blurXTo="5.0" 
        blurYFrom="0.0" blurYTo="5.0" 
        color="0xFF8000"/>
    <mx:Glow id="unglowImage" duration="100" 
        alphaFrom="1.0" alphaTo="0.3" 
        blurXFrom="5.0" blurXTo="0.0" 
        blurYFrom="5.0" blurYTo="0.0" 
        color="0xFF8000"/>
    <mx:WipeLeft id="wipeOut" duration="250"/>
    <mx:WipeRight id="wipeIn" duration="250"/>

    <mx:ApplicationControlBar dock="true">
        <mx:PopUpButton id="bgButton" label="Background" openAlways="true" styleName="appBarButton"
            creationComplete="bgButton.popUp = new BackgroundSelector();"/>
        <mx:PopUpButton id="styleButton" label="Map Style" openAlways="true" styleName="appBarButton"
            creationComplete="styleButton.popUp = new StyleSelector();"/>
		<mx:PopUpMenuButton id="gpsButton" styleName="appBarButton"
		    itemClick="if (event.index==0) { trackLoader.load(); } else { new MyGpxDialog().init(); }">
			<mx:dataProvider>
				<mx:Array>
					<mx:Object label="GPS data" />
					<mx:Object label="My tracks" />
				</mx:Array>
			</mx:dataProvider>
		</mx:PopUpMenuButton>
        <mx:Spacer width="100%"/>
        <mx:Button label="Undo" click="MainUndoStack.getGlobalStack().undo();" styleName="appBarButton"
            enabled="{MainUndoStack.getGlobalStack().canUndo()}"
            toolTip="{MainUndoStack.getGlobalStack().getUndoDescription() ? 'Undo '+MainUndoStack.getGlobalStack().getUndoDescription() : 'Undo last action'}" />
        <mx:Button label="Redo" click="MainUndoStack.getGlobalStack().redo();" styleName="appBarButton"
            enabled="{MainUndoStack.getGlobalStack().canRedo()}"/>
        <mx:Spacer width="100%"/>
        <mx:Button label="Help" click="new HelpDialog().init();" styleName="appBarButton" />
        <mx:Button label="Options" click="new OptionsDialog().init();" styleName="appBarButton" /> 
        <mx:Button label="Save" icon="@Embed('embedded/upload.svg')" disabledIcon="@Embed('embedded/upload_disabled.svg')" styleName="appBarButton"
			click="SaveManager.saveChanges();" id="saveButton" enabled="false"/>
    </mx:ApplicationControlBar>
    
    <mx:HDividedBox width="100%" height="100%">

	  <!-- Tag viewer -->
	  <potlatch2:TagViewer width="25%" height="100%" id="tagViewer"/>

      <mx:Canvas width="75%" height="100%">
        <mx:Canvas id="map_area" resize="onResizeMap()"
            top="0" left="0" width="100%" height="100%" dragEnter="dragEnterHandler(event);" dragDrop="dragDropHandler(event);">
        </mx:Canvas>
        <mx:Image source="@Embed('embedded/zoomIn.svg')" right="3" top="3" click="theMap.zoomIn();"
            rollOverEffect="glowImage" rollOutEffect="unglowImage" toolTip="{'Zoom in - currently z'+getScale()}" />
        <mx:Image source="@Embed('embedded/zoomOut.svg')" right="3" top="20" click="theMap.zoomOut();"
            rollOverEffect="glowImage" rollOutEffect="unglowImage" toolTip="{'Zoom out - currently z'+getScale()}" />
        <mx:TextArea id="dataWorking" text="" right="20" top="3" disabledColor="black" backgroundDisabledColor="0xFFFFEA" height="18"
            enabled="false" borderThickness="0"
            showEffect="{wipeIn}" hideEffect="{wipeOut}"/>

    </mx:Canvas>

    </mx:HDividedBox>

	<mx:Script><![CDATA[
		import net.systemeD.halcyon.*;
		import net.systemeD.halcyon.connection.*;
		import net.systemeD.potlatch2.*;
		import net.systemeD.potlatch2.save.SaveManager;
		import net.systemeD.potlatch2.collections.*;
		import net.systemeD.potlatch2.controller.*;
		import net.systemeD.potlatch2.help.*;
		import net.systemeD.potlatch2.options.*;
		import net.systemeD.potlatch2.utils.*;
        import net.systemeD.potlatch2.mygpx.*;
		import mx.managers.PopUpManager;
		import flash.system.Security;
		import flash.net.*;
		import flash.events.MouseEvent;
		import flash.display.Sprite;
		import mx.core.IChildList;
        import mx.containers.Canvas;
		import mx.core.Application;
        import mx.events.DragEvent;
        import mx.events.CloseEvent;
        import mx.managers.DragManager;
        import mx.core.DragSource;
        import mx.controls.Alert;

        public var theMap:Map;
        public var theController:EditController;
		public var yahoo:Yahoo;
		public var trackLoader:TrackLoader;
		public var toolbox:Toolbox;
        public var bugLoader:BugLoader;
        public var bikeShopLoader:BikeShopLoader;

		private var savecount:uint=0;
		private var loadcount:uint=0;

        include "version.as";

		private function initApp():void {

			Globals.vars.map_area = map_area;
			Globals.vars.root = map_area.rawChildren;			// set up global reference to root level
			var _root:IChildList = map_area.rawChildren;		// convenient local shorthand
			Globals.vars.nocache = loaderInfo.parameters['nocache'] == 'true';

			// populate sharedObject with loaderInfo parameters if supplied
			var obj:SharedObject = SharedObject.getLocal("user_state");
			var objChanged:Boolean = false;
			if (loaderInfo.parameters['tileurl']) {
				obj.setProperty('background_url',loaderInfo.parameters['tileurl']); 
				obj.setProperty('background_name','Custom'); 
				objChanged=true;
			}
			if (loaderInfo.parameters['style']) { 
				obj.setProperty('stylesheet_url',loaderInfo.parameters['style']);
				obj.setProperty('stylesheet_name','Custom');
				objChanged=true; 
			}
			if (objChanged) { obj.flush(); }

			// map backdrop object
            var w:uint = map_area.width;
            var h:uint = map_area.height;
            var b:Sprite = new Sprite();
            b.height=h; b.width=w;
            b.graphics.beginFill(0xFFFFEA,100); 
            b.graphics.drawRect(0,0,w,h); 
            b.graphics.endFill();
			_root.addChild(b);

			// pass additional parameters to map
			var params:Object={}; var k:String;
			for (k in this.loaderInfo.parameters) {
				params[k]=this.loaderInfo.parameters[k];
			}
			for (k in SharedObject.getLocal('user_state').data) {
				params[k]=SharedObject.getLocal('user_state').data[k];
			}
			params['tileblocks']=[new RegExp("google","i")];	// hard-coded block on Google tiles

			// create map and Yahoo
			theMap=new Map(params);

            // Auto-load vector backgrounds from config
            // This could go spectacularly wrong if map.init completes before the event listener below is added
            theMap.addEventListener(MapEvent.INITIALISED, function(e:Event):void { VectorBackgrounds.instance().init(theMap); });

			theMap.backdrop=b;
			yahoo=new Yahoo(w,h,theMap);
			yahoo.hide();
			_root.addChild(yahoo);
			_root.addChild(theMap);
            theMap.updateSize(w,h);
			theMap.addEventListener(MapEvent.SCALE, scaleHandler);

			// add mask for map
			var s:Sprite=new Sprite();
			s.graphics.beginFill(0xFFFFFF,100);
			s.graphics.drawRect(0,0,w,h);
			s.graphics.endFill();
			_root.addChild(s);
			theMap.mask=s;

			// add attribution/logo sprite
			var overlay:Sprite=new Sprite();
			var attribution:TextField=new TextField();
			attribution.width=220; attribution.height=300;
			attribution.multiline=true;
			attribution.wordWrap=true;
			attribution.selectable=false;
			attribution.defaultTextFormat=new TextFormat("_sans", 9, 0, false, false, false);
			overlay.addChild(attribution);
			var terms:TextField=new TextField();
			terms.width=200; terms.height=15;
			terms.selectable=false;
			terms.defaultTextFormat=new TextFormat("_sans", 9, 0, false, false, true);
			overlay.addChild(terms);
			_root.addChild(overlay);

			// mouse-up handler attached to stage, so the user can release outside the map
			stage.addEventListener(MouseEvent.MOUSE_UP, theMap.mouseUpHandler);
			Globals.vars.map_area.addEventListener(MouseEvent.MOUSE_MOVE, theMap.mouseMoveHandler);
			Globals.vars.map_area.addEventListener(MouseEvent.MOUSE_DOWN, theMap.mouseDownHandler);

			// initialise imagery and stylesheets
			Imagery.instance().init(theMap, overlay, yahoo);
			Stylesheets.instance().init(theMap);
			Imagery.instance().addEventListener(MapEvent.BUMP, bumpHandler);

			// keyboard event attached to stage
			stage.addEventListener(KeyboardEvent.KEY_UP, theMap.keyUpHandler);

			// position toolbox
			toolbox=Toolbox(PopUpManager.createPopUp(this,Toolbox,false));
			toolbox.init(theController);
			toolbox.x=stage.stageWidth-toolbox.width-5;
			toolbox.y=stage.stageHeight-toolbox.height-5;

			// add debug field
			var t:TextField=new TextField();
			t.width=500; t.height=150; t.border=true;
			t.multiline=true;
			_root.addChild(t);
			Globals.vars.debug=t;
            t.visible = loaderInfo.parameters["show_debug"] == 'true';
			Globals.vars.root=theMap;	// just for the addDebug function

            theController = new EditController(theMap, tagViewer, toolbox);
            theController.setActive();
            
            var conn:Connection = Connection.getConnectionInstance();
            conn.addEventListener(Connection.LOAD_STARTED, onDataStart);
            conn.addEventListener(Connection.LOAD_COMPLETED, onDataComplete);
            conn.addEventListener(Connection.SAVE_STARTED, onDataStart);
            conn.addEventListener(Connection.SAVE_COMPLETED, onDataComplete);
            conn.addEventListener(Connection.DATA_DIRTY, onDataDirty);
            conn.addEventListener(Connection.DATA_CLEAN, onDataClean);
			conn.addEventListener(MapEvent.ERROR, onMapError);
			conn.addEventListener(MapEvent.ATTENTION, onAttention);

            // set the access token from saved cookie
            var tokenObject:SharedObject = SharedObject.getLocal("access_token");
            conn.setAccessToken(tokenObject.data["oauth_token"], tokenObject.data["oauth_token_secret"]);

            // Load any requested GPX track
            if (loaderInfo.parameters['gpx']) {
                var id:Number = loaderInfo.parameters['gpx'];
                if (conn.hasAccessToken()) { 
                    loadTrace(id);
                } else {
                    SaveManager.ensureAccess(function ():void { loadTrace(id); });
                }
            }

			// Load arbitrary GPX from provided URL
			if (loaderInfo.parameters['gpx_url']) {
				var vectorlayer:VectorLayer=new VectorLayer(name,theMap,"gpx.css");
				vectorlayer.url=loaderInfo.parameters['gpx_url'];
				var gpx:GpxImporter=new GpxImporter(vectorlayer, vectorlayer.paint, [vectorlayer.url], 
				                                    function(success:Boolean,message:String=null):void {
					if (!success) return;
					theMap.addVectorLayer(vectorlayer);
					dispatchEvent(new Event("layers_changed"));
				                                    }, false);
			}

			// create GPS trackloader
			trackLoader=new TrackLoader(theMap,conn.apiBase);

            // Force authentication on startup, if required
            // force_auth == force => checks for access token, and displays OAuth panel if needed
            var force_auth:String = loaderInfo.parameters["force_auth"];
            if (!conn.hasAccessToken() && force_auth == 'force') {
              SaveManager.ensureAccess(onAccessChecked);
            }

            // show help dialog on startup, if required
            // show_help == always => on every startup
            // show_help == once => show on first startup only
            var show_help:String = loaderInfo.parameters["show_help"];

            if (show_help == 'always' || (show_help == 'once' && obj.data["help_shown"] != "true")) {
              new HelpDialog().init();
            }

            // Check if Tiger highlighting should be enabled from saved object
            Globals.vars.highlightTiger = obj.data['tiger_highlighted'];
		}
		
		public function onMapError(mapEvent:MapEvent):void {
			var buttons:uint=0;
			if (mapEvent.params.no) { trace("no is set"); }
			if (mapEvent.params.yes             ) buttons|=mx.controls.Alert.YES;
			if (mapEvent.params.no              ) buttons|=mx.controls.Alert.NO;
			if (mapEvent.params.cancel          ) buttons|=mx.controls.Alert.CANCEL;
			if (mapEvent.params.ok || buttons==0) buttons|=mx.controls.Alert.OK;
			trace("showing alert with "+buttons);
			Alert.show(mapEvent.params.message, 'Error', buttons, null, function(closeEvent:CloseEvent):void { 
				switch (closeEvent.detail) {
					case mx.controls.Alert.CANCEL:	mapEvent.params.cancel(); break;
					case mx.controls.Alert.YES:		mapEvent.params.yes(); break;
					case mx.controls.Alert.NO:		mapEvent.params.no(); break;
					default:						if (mapEvent.params.ok) mapEvent.params.ok();
				}
			});
		}

		/* Highlight an entity in response to an 'attention' event */

		public function onAttention(mapEvent:MapEvent):void {
			var entity:Entity=mapEvent.params.entity;
			if (entity is Relation) {
				// If it's a relation, just bring up the editor panel
				var panel:RelationEditorPanel = RelationEditorPanel(
					PopUpManager.createPopUp(Application(Application.application), RelationEditorPanel, true));
				panel.setRelation(entity as Relation);
				PopUpManager.centerPopUp(panel);
				return;
			}

			var lat:Number, lon:Number;
			var panTo:Boolean=true;
			if (entity is Way) {
				// If it's a way, find if it's on-screen
				for (var i:uint=0; i<Way(entity).length; i++) {
					var node:Node=Way(entity).getNode(i)
					if (node.within(theMap.edge_l,theMap.edge_r,theMap.edge_t,theMap.edge_b)) { panTo=false; }
					lat=node.lat; lon=node.lon;
				}
			} else if (entity is Node) {
				// If it's a node, check if it's on-screen
				if (entity.within(theMap.edge_l,theMap.edge_r,theMap.edge_t,theMap.edge_b)) { panTo=false; }
				lat=Node(entity).lat; lon=Node(entity).lon;
			}
			// Pan if required, and select the object
			if (panTo) { theMap.moveMapFromLatLon(lat,lon); }
			theController.setState(theController.findStateForSelection([entity]));
		}

        public function onResizeMap():void {
            if ( theMap != null )
                theMap.updateSize(map_area.width, map_area.height);

			if (toolbox) {
				toolbox.x=Math.min(toolbox.x,stage.stageWidth-toolbox.width-5);
				toolbox.y=Math.min(toolbox.y,stage.stageHeight-toolbox.height-5);
			}
        }
		private function bumpHandler(e:MapEvent):void {
			if (toolbox) {
				toolbox.y=Math.min(toolbox.y,stage.stageHeight-toolbox.height-10-e.params.y);
			}
		}

        private function onDataStart(event:Event):void {
			switch (event.type) {
				case Connection.LOAD_STARTED:	loadcount++; break;
				case Connection.SAVE_STARTED:	savecount++; break;
			}
			updateDataWorking();
        }
        private function onDataComplete(event:Event):void {
			switch (event.type) {
				case Connection.LOAD_COMPLETED:	loadcount--; break;
				case Connection.SAVE_COMPLETED:	savecount--; break;
			}
            updateDataWorking();
        }
		private function updateDataWorking():void {
			if (loadcount>0 && savecount>0) { dataWorking.text="Loading/saving..."; }
			else if (loadcount>0)           { dataWorking.text="Loading data..."; }
			else if (savecount>0)           { dataWorking.text="Saving data..."; }
			else                            { dataWorking.text=""; }
			dataWorking.visible=(dataWorking.text!="");
		}
        private function onDataDirty(event:Event):void {
			saveButton.enabled=true;
            if (ExternalInterface.available) {
              ExternalInterface.call("markChanged", false);
            }
		}
		private function onDataClean(event:Event):void {
			saveButton.enabled=false;
            if (ExternalInterface.available) {
              ExternalInterface.call("markChanged", true);
            }
		}
		


		private function scaleHandler(event:MapEvent):void {
			dispatchEvent(new Event("rescale"));
		}
		
		[Bindable(event="rescale")]
		private function getScale():String {
			return String(theMap.scale);
		}

        private function dragEnterHandler(event:DragEvent):void {
            // Get the drop target component from the event object.
            var dropTarget:Canvas=event.currentTarget as Canvas;
            // Accept the drag only if the user is dragging poi with tags
            if (event.dragSource.hasFormat('tags')) 
            {
                DragManager.acceptDragDrop(dropTarget);
            }
        }
        
        private function dragDropHandler(event:DragEvent):void {
			// Deselect the dragged icon
			if (event.dragSource.dataForFormat('container')) {
				event.dragSource.dataForFormat('container').selectedItem=-1;
			}

			// Get the tags
            var tags:Array = event.dragSource.dataForFormat('tags') as Array;
            var mapLoc:Point = Globals.vars.root.globalToLocal(new Point(event.stageX, event.stageY));
            var lat:Number = Globals.vars.root.coord2lat(mapLoc.y);
            var lon:Number = Globals.vars.root.coord2lon(mapLoc.x);
            
            var createAction:CompositeUndoableAction = new CompositeUndoableAction("Create POI");
            
            var node:Node = Connection.getConnectionInstance().createNode({}, lat, lon, createAction.push);
            for each ( var tag:Object in tags ) {
                node.setTag(tag.k, tag.v, createAction.push);
            }
			Connection.getConnectionInstance().registerPOI(node);
			MainUndoStack.getGlobalStack().addAction(createAction);
            theController.setState(new SelectedPOINode(node));
        }

        /* Called when forcing an initial access token check. */
        private function onAccessChecked():void {
            // Floaty panel message "You now have access";
        }

        private function loadTrace(id:Number):void {
            var conn:Connection = Connection.getConnectionInstance();
            conn.addEventListener(Connection.TRACES_LOADED, function (e:Event):void {
                for each (var trace:Trace in conn.getTraces()) {
                    if (trace.id == id) { trace.addToMap(); }
                }
            });
            conn.fetchUserTraces();
        }

	]]></mx:Script>

</mx:Application>

