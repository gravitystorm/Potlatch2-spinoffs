<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:halcyon="net.systemeD.halcyon.*"
	xmlns:potlatch2="net.systemeD.potlatch2.*"
	layout="vertical"
	horizontalAlign="center" 
	addedToStage="initApp()">
	
	<mx:Style source="styles/Application.css"/>

    <mx:Glow id="glowImage" duration="100" 
        alphaFrom="0.3" alphaTo="1.0" 
        blurXFrom="0.0" blurXTo="5.0" 
        blurYFrom="0.0" blurYTo="5.0" 
        color="0xFF8000"/>
    <mx:Glow id="unglowImage" duration="100" 
        alphaFrom="1.0" alphaTo="0.3" 
        blurXFrom="5.0" blurXTo="0.0" 
        blurYFrom="5.0" blurYTo="0.0" 
        color="0xFF8000"/>
    <mx:WipeLeft id="wipeOut" duration="250"/>
    <mx:WipeRight id="wipeIn" duration="250"/>

    <mx:ApplicationControlBar dock="true">
        <mx:PopUpButton id="bgButton" label="Background" openAlways="true"
            creationComplete="bgButton.popUp = new BackgroundSelector();"/>
        <mx:PopUpButton id="styleButton" label="Map Style" openAlways="true"
            creationComplete="styleButton.popUp = new StyleSelector();"/>
        <mx:Spacer width="100%"/>
        <mx:Button label="Undo" click="MainUndoStack.getGlobalStack().undo();"
            enabled="{MainUndoStack.getGlobalStack().canUndo()}"/>
        <mx:Button label="Redo" click="MainUndoStack.getGlobalStack().redo();"
            enabled="{MainUndoStack.getGlobalStack().canRedo()}"/>
        <mx:Spacer width="100%"/>
        <mx:Button label="Help" click="new HelpDialog().init();" />
        <mx:Button label="Options" click="new OptionsDialog().init();" /> 
        <mx:Button label="Save" icon="@Embed('embedded/save.svg')" click="SaveManager.saveChanges();" id="saveButton" 
			enabled="false"/>
    </mx:ApplicationControlBar>
    
    <mx:HDividedBox width="100%" height="100%">

	  <!-- Tag viewer -->
	  <potlatch2:TagViewer width="25%" height="100%" id="tagViewer"/>

      <mx:Canvas width="75%" height="100%">
        <mx:Canvas id="map_area" resize="onResizeMap()"
            top="0" left="0" width="100%" height="100%" dragEnter="dragEnterHandler(event);" dragDrop="dragDropHandler(event);">
        </mx:Canvas>
        <mx:Image source="@Embed('embedded/zoomIn.svg')" right="3" top="3" click="theMap.zoomIn();"
            rollOverEffect="glowImage" rollOutEffect="unglowImage"/>
        <mx:Image source="@Embed('embedded/zoomOut.svg')" right="3" top="20" click="theMap.zoomOut();"
            rollOverEffect="glowImage" rollOutEffect="unglowImage"/>
        <mx:TextArea id="dataWorking" text="" right="20" top="3" disabledColor="black" backgroundDisabledColor="0xFFFFEA" height="18"
            enabled="false" borderThickness="0"
            showEffect="{wipeIn}" hideEffect="{wipeOut}"/>

    </mx:Canvas>

		<potlatch2:Toolbox id="toolbox" 
			height="46" width="253" 
			headerHeight="6" headerColors="[black, gray]" 
			borderThicknessRight="0" borderThicknessLeft="0" borderThicknessBottom="0" 
			paddingLeft="4" paddingTop="4" layout="horizontal"
			includeInLayout="false" 
			creationComplete="toolboxClose.y=-6; toolboxClose.x=239;">

			<mx:Image data="@Embed('embedded/close_small.png')"
			    includeInLayout="false" id="toolboxClose" click="toolbox.toggle();" />

	        <mx:Button icon="@Embed('embedded/delete.svg')"
				click='toolbox.doDelete();' 
				enabled="{toolbox.canDo('delete')}" 
				alpha="{toolbox.getAlpha('delete')}" 
				toolTip="Delete item" 
				width="28" height="28" textAlign="left" paddingLeft="6" paddingRight="0" />
	        <mx:Button icon="@Embed('embedded/direction.svg')" 
                click='toolbox.doReverseDirection();'
				enabled="{toolbox.canDo('reverseDirection')}" 
				alpha="{toolbox.getAlpha('reverseDirection')}" 
				toolTip="Reverse direction" 
				width="28" height="28" textAlign="left" paddingLeft="8" paddingRight="0" />
	        <mx:Button icon="@Embed('embedded/cut.svg')" 
                click='toolbox.doSplit();'
				enabled="{toolbox.canDo('split')}" 
				alpha="{toolbox.getAlpha('split')}" 
				toolTip="Split way" 
				width="28" height="28" textAlign="left" paddingLeft="8" paddingRight="0" />
	        <mx:Button icon="@Embed('embedded/straighten.svg')" 
				click='toolbox.doStraighten();' 
				enabled="{toolbox.canDo('straighten')}" 
				alpha="{toolbox.getAlpha('straighten')}" 
				toolTip="Straighten way" 
				width="28" height="28" textAlign="left" paddingLeft="5" paddingRight="0" />
	        <mx:Button icon="@Embed('embedded/circle.svg')" 
				click='toolbox.doCircularise();' 
				enabled="{toolbox.canDo('circularise')}" 
				alpha="{toolbox.getAlpha('circularise')}" 
				toolTip="Make circular" 
				width="28" height="28" textAlign="left" paddingLeft="4" paddingRight="0" />
	        <mx:Button icon="@Embed('embedded/quadrilateralise.svg')" 
				click='toolbox.doQuadrilateralise();' 
				enabled="{toolbox.canDo('quadrilateralise')}" 
				alpha="{toolbox.getAlpha('quadrilateralise')}" 
				toolTip="Make right-angled" 
				width="28" height="28" textAlign="left" paddingLeft="6" paddingRight="0" />
	        <mx:Button icon="@Embed('embedded/parallel.svg')" 
				click='toolbox.doParallelise();' 
				enabled="{toolbox.canDo('parallelise')}" 
				alpha="{toolbox.getAlpha('parallelise')}" 
				toolTip="Create parallel way" 
				width="28" height="28" textAlign="left" paddingLeft="8" paddingRight="0" />

		</potlatch2:Toolbox>

    </mx:HDividedBox>

	<mx:Script><![CDATA[
		import net.systemeD.halcyon.*;
		import net.systemeD.halcyon.connection.*;
		import net.systemeD.potlatch2.*;
		import net.systemeD.potlatch2.save.SaveManager;
		import net.systemeD.potlatch2.controller.*;
		import net.systemeD.potlatch2.help.*;
		import net.systemeD.potlatch2.options.*;
		import net.systemeD.potlatch2.utils.*;
		import mx.managers.PopUpManager;
		import flash.system.Security;
		import flash.net.*;
		import flash.events.MouseEvent;
		import flash.display.Sprite;
		import mx.core.IChildList;
        import mx.containers.Canvas;
		import mx.core.Application;
        import mx.events.DragEvent;
        import mx.managers.DragManager;
        import mx.core.DragSource;

        public var theMap:Map;
        public var theController:EditController;

		private var savecount:uint=0;
		private var loadcount:uint=0;
		
		public var version:String="(Foxbase) Alpha";			// mxml won't read it if it's a const. Go figure

		private function initApp():void {

			Globals.vars.map_area = map_area;
			Globals.vars.root = map_area.rawChildren;			// set up global reference to root level
			var _root:IChildList = map_area.rawChildren;		// convenient local shorthand

			// map backdrop object
            var w:uint = map_area.width;
            var h:uint = map_area.height;
            var b:Sprite = new Sprite();
            b.height=h; b.width=w;
            b.graphics.beginFill(0xFFFFEA,100); 
            b.graphics.drawRect(0,0,w,h); 
            b.graphics.endFill();
			_root.addChild(b);

			// create map and Yahoo
			theMap=new Map(this.loaderInfo.parameters);
			theMap.backdrop=b;
			var yahoo:Yahoo=new Yahoo(w,h,theMap);
			yahoo.hide();
			Globals.vars.yahoo = yahoo;
			_root.addChild(yahoo);
			_root.addChild(theMap);
            theMap.updateSize(w,h);

			// add mask for map
			var s:Sprite=new Sprite();
			s.graphics.beginFill(0xFFFFFF,100);
			s.graphics.drawRect(0,0,w,h);
			s.graphics.endFill();
			_root.addChild(s);
			theMap.mask=s;

			// mouse-up handler attached to stage, so the user can release outside the map
			stage.addEventListener(MouseEvent.MOUSE_UP, theMap.mouseUpHandler);
			Globals.vars.map_area.addEventListener(MouseEvent.MOUSE_MOVE, theMap.mouseMoveHandler);
			Globals.vars.map_area.addEventListener(MouseEvent.MOUSE_DOWN, theMap.mouseDownHandler);

			// keyboard event attached to stage
			stage.addEventListener(KeyboardEvent.KEY_UP, theMap.keyUpHandler);

			// load imagery XML
	        var request:URLRequest = new URLRequest("imagery.xml?"+Math.random());
	        var loader:URLLoader = new URLLoader();
	        loader.addEventListener(Event.COMPLETE, onImageryLoad);
	        loader.load(request);

			// position toolbox
			toolbox.x=stage.stageWidth-275;
			toolbox.y=stage.stageHeight-100;

			// add debug field
			var t:TextField=new TextField();
			t.width=500; t.height=150; t.border=true;
			t.multiline=true;
			_root.addChild(t);
			Globals.vars.debug=t;
            t.visible = loaderInfo.parameters["show_debug"] == 'true';
			Globals.vars.root=theMap;	// just for the addDebug function

            theController = new EditController(theMap, tagViewer, toolbox);
            theController.setActive();
            
            var conn:Connection = Connection.getConnectionInstance();
            conn.addEventListener(Connection.LOAD_STARTED, onDataStart);
            conn.addEventListener(Connection.LOAD_COMPLETED, onDataComplete);
            conn.addEventListener(Connection.SAVE_STARTED, onDataStart);
            conn.addEventListener(Connection.SAVE_COMPLETED, onDataComplete);
            conn.addEventListener(Connection.DATA_DIRTY, onDataDirty);
            conn.addEventListener(Connection.DATA_CLEAN, onDataClean);
		}
		
        public function onResizeMap():void {
            if ( theMap != null )
                theMap.updateSize(map_area.width, map_area.height);
        }

        private function onDataStart(event:Event):void {
			switch (event.type) {
				case Connection.LOAD_STARTED:	loadcount++; break;
				case Connection.SAVE_STARTED:	savecount++; break;
			}
			updateDataWorking();
        }
        private function onDataComplete(event:Event):void {
			switch (event.type) {
				case Connection.LOAD_COMPLETED:	loadcount--; break;
				case Connection.SAVE_COMPLETED:	savecount--; break;
			}
            updateDataWorking();
        }
		private function updateDataWorking():void {
			if (loadcount>0 && savecount>0) { dataWorking.text="Loading/saving..."; }
			else if (loadcount>0)           { dataWorking.text="Loading data..."; }
			else if (savecount>0)           { dataWorking.text="Saving data..."; }
			else                            { dataWorking.text=""; }
			dataWorking.visible=(dataWorking.text!="");
		}
        private function onDataDirty(event:Event):void {
			saveButton.enabled=true;
		}
		private function onDataClean(event:Event):void {
			saveButton.enabled=false;
		}
		
        private function onImageryLoad(event:Event):void {
			var xml:XML = new XML(URLLoader(event.target).data);
            theController.imagery=new Array(
				{ label: "None", data: "" },
				{ label: "Yahoo", data: "yahoo" } );
			for each(var set:XML in xml.set) {
                theController.imagery.push({ label:set.child("name"), data:set.child("url") });
			}
		}
        
        private function dragEnterHandler(event:DragEvent):void {
            // Get the drop target component from the event object.
            var dropTarget:Canvas=event.currentTarget as Canvas;
            // Accept the drag only if the user is dragging poi with tags
            if (event.dragSource.hasFormat('tags')) 
            {
                DragManager.acceptDragDrop(dropTarget);
            }
        }
        
        private function dragDropHandler(event:DragEvent):void {
            // Get the data identified by the color format from the drag source.
            // Blame http://www.adobe.com/devnet/flex/quickstart/adding_drag_and_drop/#manual
            // for whatever horrid abuse of "color format" this is doing
            var tags:Array = event.dragSource.dataForFormat('tags') as Array;
            var mapLoc:Point = Globals.vars.root.globalToLocal(new Point(event.stageX, event.stageY));
            var lat:Number = Globals.vars.root.coord2lat(mapLoc.y);
            var lon:Number = Globals.vars.root.coord2lon(mapLoc.x);
            
            var createAction:CompositeUndoableAction = new CompositeUndoableAction("Create POI");
            
            var node:Node = Connection.getConnectionInstance().createNode({}, lat, lon, createAction.push);
            for each ( var tag:Object in tags ) {
                node.setTag(tag.k, tag.v, createAction.push);
            }
			Connection.getConnectionInstance().registerPOI(node);
			MainUndoStack.getGlobalStack().addAction(createAction);
            theController.setState(new SelectedPOINode(node));
        }

	]]></mx:Script>

</mx:Application>

